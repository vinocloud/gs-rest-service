// Jenkinsfile
pipeline {
    agent any
    environment {
        APP_NAME = "gs-rest-service"
        DOCKER_IMAGE_NAME = "${APP_NAME}-app"
        DOCKER_CONTAINER_NAME = "${APP_NAME}-container"
        HOST_APP_PORT = 8081
        CONTAINER_APP_PORT = 8080
        APP_SUBDIRECTORY = "gs-rest-service" // This is the folder containing Dockerfile and 'complete'
        GRADLE_PROJECT_SUBDIRECTORY = "complete" // This is the folder containing Gradle files within APP_SUBDIRECTORY
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Source Code') {
            steps {
                git branch: 'main', url: 'https://github.com/vinocloud/gs-rest-service'
            }
        }
        // ******* ADD THIS STAGE FOR DEBUGGING *******
        stage('Debug Workspace Structure') {
            steps {
                echo "Listing workspace contents after checkout:"
                sh 'ls -R' // List recursively to see the full tree
            }
        }
        // ******* END DEBUGGING STAGE *******

        stage('Build Docker Image') {
            steps {
                script {
                    dir("${APP_SUBDIRECTORY}") { // Change into the directory where Dockerfile is expected
                        echo "Building Docker image: ${DOCKER_IMAGE_NAME}:latest from directory: ${pwd()}" // Use pwd() to confirm CWD
                        sh "docker build -t ${DOCKER_IMAGE_NAME}:latest ."
                        echo "Docker image built successfully."
                    }
                }
            }
        }
        stage('Stop and Remove Old Container (if exists)') {
            steps {
                script {
                    echo "Checking for existing container: ${DOCKER_CONTAINER_NAME}"
                    def containerId = sh(returnStdout: true, script: "docker ps -aq -f name=${DOCKER_CONTAINER_NAME}").trim()

                    if (containerId) {
                        echo "Found existing container ${DOCKER_CONTAINER_NAME} with ID: ${containerId}"
                        try {
                            sh "docker stop ${containerId}"
                            echo "Stopped container ${DOCKER_CONTAINER_NAME}."
                        } catch (Exception e) {
                            echo "Could not stop container ${DOCKER_CONTAINER_NAME}. It might already be stopped or not running."
                        }
                        try {
                            sh "docker rm ${containerId}"
                            echo "Removed container ${DOCKER_CONTAINER_NAME}."
                        } catch (Exception e) {
                            echo "Could not remove container ${DOCKER_CONTAINER_NAME}. It might have already been removed."
                        }
                    } else {
                        echo "No existing container ${DOCKER_CONTAINER_NAME} found. Skipping stop/remove."
                    }
                }
            }
        }
        stage('Run New Docker Container') {
            steps {
                script {
                    echo "Running new Docker container: ${DOCKER_CONTAINER_NAME}"
                    sh "docker run -d -p ${HOST_APP_PORT}:${CONTAINER_APP_PORT} --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_NAME}:latest"
                    echo "Spring Boot application container is running on http://localhost:${HOST_APP_PORT}"
                }
            }
        }
    }
    post {
        always {
            echo "Deployment pipeline finished."
        }
        failure {
            echo "Deployment pipeline failed. Check logs for details."
        }
    }
}
